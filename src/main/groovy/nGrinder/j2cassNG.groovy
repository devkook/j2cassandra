package org.ngrinder;

import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.plugin.http.HTTPRequest
import net.grinder.plugin.http.HTTPPluginControl;
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import HTTPClient.HTTPResponse
import HTTPClient.NVPair

import devkook.study.java2cassandra.App
import devkook.study.java2cassandra.RandomGenerator

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class TestRunner {
    public static GTest test
    public static HTTPRequest request

    public static def nativeApp;
    public static def nativeRandom;

    @BeforeProcess
    public static void beforeProcess() {
        // load 'native_client.so or native_client.dll with interface NativeClient
        //(File extension(so or dll) is depending on agent's OS)

        String host = "127.0.0.1:9160,localhost:9160"
        String clusterNam = "FBWOTJQ"
        String keyspace = "hectortestkeyspace"

        nativeApp = new App(host, clusterNam, keyspace, "")
        nativeRandom = new RandomGenerator()
        //nativeRandom = Native.loadLibrary( 'RandomGenerator', RandomGenerator)


        test = new GTest(1, "j2cassNG")
    }

    @BeforeThread
    public void beforeThread() {
        grinder.statistics.delayReports=true;
        // Record the current test instances method "doTest"
        // because the nativeClient instance is not recordable because it's the native method.
        test.record(this, "doTest");
    }

    @Test
    public void test(){
        doTest()
    }

    public static String columnfamilyName = "hectortestcolumfamily";
    public static String columnName = "fake_column_1";


    public void doTest() {
        // Call the native library's methods.
        //Given
        String rowKey = "row-key"
        String value = "value"

        //When
        //nativeApp.insert(columnfamilyName, columnName, rowKey, value);
        //nativeApp.insert(columnfamilyName, columnName, nativeRandom.ranRowkey(), nativeRandom.ranString());
        //nativeApp.insert(columnfamilyName, columnName, nativeRandom.ranRowkey(), nativeRandom.getSingleTonekilobyteString(200));

        nativeApp.bachInsert(columnfamilyName,columnName,10,0.01f);

        //Then
    }
}
